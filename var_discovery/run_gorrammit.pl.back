#!/usr/bin/perl
use warnings;
use strict;

my $in        = shift;
my @lines     = `cat $in`;

######## Start Variables ########

my $bin       = "/opt/var_calling";
my $gatk      = "$bin/GenomeAnalysisTK.jar";
my $ref_dir   = "/safer/genomes/Homo_sapiens/UCSC/hg19";
my $dbsnp     = "$ref_dir/Annotation/Variation/dbsnp.vcf";
my $indels    = "$ref_dir/Annotation/Variation/indels.vcf";
my $exome_bed = "$ref_dir/Annotation/Genes/refSeq_genes.bed";
my $ref       = "$ref_dir/Sequence/WholeGenomeFasta/ref.fa";
my $bt2_idx   = "$ref_dir/Sequence/BowtieIndex/hg19";
my $log       = "run.log";
my $threads   = "64";
my $memory    = "64";
my $i         = 1;
my $total     = 13;
chomp ( my @reads  = `ls *fastq` );
chomp ( my $time   = `date +%T` );

######## End Variables ########

for ( my $i = 0; $i < @reads; $i += 2 )
{
    my ($name) = $reads[$i] =~ /^(.+?)_/;
    my $R1     = $reads[$i];
    my $R2     = $reads[$i+1];
    my $nom    = "00";
    chomp ( $time = `date +%T` );
    print "[$time][- / -] Working on sample $name.\n";
    chomp ( $time = `date +%T` );
    print "[$time][$nom/$total] Aligning read 1 and read 2 against hg19 using bowtie2.\n";
    system ( "bowtie2 --local -x $bt2_idx -p $threads -1 $R1 -2 $R2 -S $name.sam >> $log.stdout 2>> $log.stderr" );
    $nom = sprintf ( "%02d", ++$nom);
    chomp ( $time = `date +%T` );
    print "[$time][$nom/$total] Converting from sam to bam using samtools view -bS.\n";
    system ( "samtools view -bS $name.sam -o $name.bam >> $log.stdout 2>> $log.stderr" );
    $nom = sprintf ( "%02d", ++$nom);
    chomp ( $time = `date +%T` );
    print "[$time][$nom/$total] Sorting the bam file using PicardTools SortSam.jar.\n";
    system ( "java -Xmx${memory}g -jar $bin/SortSam.jar INPUT=$name.bam OUTPUT=$name.sorted.bam SORT_ORDER=coordinate VALIDATION_STRINGENCY=SILENT >> $log.stdout 2>> $log.stderr" );
    $nom = sprintf ( "%02d", ++$nom);
    chomp ( $time = `date +%T` );
    print "[$time][$nom/$total] Fixing Read Group in the bam file using PicardTools AddOrReplaceReadGroups.jar.\n";
    system ( "java -Xmx${memory}g -jar $bin/AddOrReplaceReadGroups.jar I=$name.sorted.bam O=$name.fixed_RG.bam SO=coordinate RGID=$name RGLB=$name RGPL=illumina RGPU=$name RGSM=$name VALIDATION_STRINGENCY=SILENT CREATE_INDEX=true >> $log.stdout 2>> $log.stderr" );
    $nom = sprintf ( "%02d", ++$nom);
    chomp ( $time = `date +%T` );
    print "[$time][$nom/$total] Creating realignment targets - needed for indel realignment - using GATK RealignerTargetCreator.\n";
    system ( "java -Xmx${memory}g -jar $gatk -T RealignerTargetCreator -R $ref -I $name.fixed_RG.bam -known $indels -o $name.indel_realigner.intervals >> $log.stdout 2>> $log.stderr" );
    $nom = sprintf ( "%02d", ++$nom);
    chomp ( $time = `date +%T` );
    print "[$time][$nom/$total] Realigning around indels using GATK IndelRealigner.\n";
    system ( "java -Xmx${memory}g -jar $gatk -T IndelRealigner -R $ref -I $name.fixed_RG.bam -known $indels -o $name.indels_realigned.bam --maxReadsForRealignment 50000 --maxReadsInMemory 500000 -targetIntervals $name.indel_realigner.intervals >> $log.stdout 2>> $log.stderr" );
    $nom = sprintf ( "%02d", ++$nom);
    chomp ( $time = `date +%T` );
    print "[$time][$nom/$total] Counting covariates using GATK CountCovariates.\n";
    system ( "java -Xmx${memory}g -jar $gatk -T CountCovariates -nt $threads -R $ref --knownSites $dbsnp -I $name.indels_realigned.bam -cov ReadGroupCovariate -cov QualityScoreCovariate -cov CycleCovariate -cov DinucCovariate -dP illumina -recalFile $name.recal.csv >> $log.stdout 2>> $log.stderr" );
    $nom = sprintf ( "%02d", ++$nom);
    chomp ( $time = `date +%T` );
    print "[$time][$nom/$total] Recalibrating read quality scores using GATK TableRecalibration.\n";
    system ( "java -Xmx${memory}g -jar $gatk -T TableRecalibration -R $ref -I $name.indels_realigned.bam --out $name.recalibrated.bam -recalFile $name.recal.csv >> $log.stdout 2>> $log.stderr" );
    $nom = sprintf ( "%02d", ++$nom);
    chomp ( $time = `date +%T` );
    print "[$time][$nom/$total] Indexing $name.recalibrated.bam using samtools index.\n";
    system ( "samtools index $name.recalibrated.bam >> $log.stdout 2>> $log.stderr" );
    $nom = sprintf ( "%02d", ++$nom);
    chomp ( $time = `date +%T` );
    print "[$time][$nom/$total] Performing variant calling using GATK UnifiedGenotyper - SNVs.\n";
    system ( "java -Xmx8g -jar $gatk -T UnifiedGenotyper -nt $threads -R $ref -I $name.recalibrated.bam -o $name.raw_variants.snvs.vcf -mbq 20 -stand_call_conf 40.0 -stand_emit_conf 10.0 -dcov 1000 -D $dbsnp -L $exome_bed >> $log.stdout 2>> $log.stderr" );
    $nom = sprintf ( "%02d", ++$nom);
    chomp ( $time = `date +%T` );
    print "[$time][$nom/$total] Performing variant calling using GATK UnifiedGenotyper - INDELs.\n";
    system ( "java -Xmx8g -jar $gatk -T UnifiedGenotyper -nt $threads -R $ref -I $name.recalibrated.bam -o $name.raw_variants.indels.vcf -glm INDEL -mbq 20 -stand_call_conf 40.0 -stand_emit_conf 10.0 -dcov 1000 -D $indels -L $exome_bed >> $log.stdout 2>> $log.stderr" );
    $nom = sprintf ( "%02d", ++$nom);
    chomp ( $time = `date +%T` );
    print "[$time][$nom/$total] Filtering variants using GATK VariantFiltration - SNVs.\n";
    system ( "java -Xmx${memory}g -jar $gatk -T VariantFiltration -R $ref -V $name.raw_variants.snvs.vcf -o $name.filtered_variants.snvs.vcf -filter 'DP <= 20 || HRun > 8 || QD < 5.0' -filterName 'standard_filters' -filter 'MQ0 >= 4 && ((MQ0 / (1.0  * DP)) > 0.1 )' -filterName 'hard_to_validate' >> $log.stdout 2>> $log.stderr" );
    $nom = sprintf ( "%02d", ++$nom);
    chomp ( $time = `date +%T` );
    print "[$time][$nom/$total] Filtering variants using GATK VariantFiltration - INDELs.\n";
    system ( "java -Xmx${memory}g -jar $gatk -T VariantFiltration -R $ref -V $name.raw_variants.indels.vcf -o $name.filtered_variants.indels.vcf -filter 'DP <= 20 || HRun > 8 || QD < 5.0' -filterName 'standard_filters' -filter 'MQ0 >= 4 && ((MQ0 / (1.0  * DP)) > 0.1 )' -filterName 'hard_to_validate' >> $log.stdout 2>> $log.stderr" );
    system ( "mkdir $name; mv $name.* $name;" ); 
}
